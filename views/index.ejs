<!DOCTYPE html>
<html>
   <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Thrid Eye - Hazard Detector</title>
      <link rel="stylesheet" href="../css/bootstrap.min.css">
      <link rel="stylesheet" href="../css/custom.css">
      <!-- <script src="../js/bootstrap.min.js"></script> -->
      <script src="../node_modules/@azure/ms-rest-js/dist/msRest.browser.js"></script>
      <script src="../node_modules/@azure/cognitiveservices-computervision/dist/cognitiveservices-computervision.js"></script>
      <!-- <script  type="text/javascript" src="../support.js"></script>       -->

   </head>
   <body>

    <p>
      <div class="container">
         <div class="row">
            <div class="col">
               <img src="https://www.worksafebc.com/img/worksafebc_logo.jpg">
            </div>
            <div class="col">
               <center>
                  <h2>Hackathon 2019</h2>
               </center>
            </div>
            <div class="col">
               <center><img src="https://www.chakras.info/wp-content/uploads/open-third-eye.jpg" height="50"></center>
            </div>
         </div>
               <div>
            Computer Vision Key:<br> <input id="visionkey" type="text" size="50"  ><p>
            Computer Vision End Point: <br><input id="visionendpoint" size="50" ><br>
            </div>
         <p>
         <div>
            <h3>Select the hazards to verify:</h3>
            <!-- Default unchecked -->
            <div class="custom-control custom-checkbox">
               <input type="checkbox" class="custom-control-input" id="hardhat" value='hardhat' checked onclick="checkCheckboxes();">
               <label class="custom-control-label" for="hardhat">Hard Hats</label>
            </div>
            <div class="custom-control custom-checkbox">
               <input type="checkbox" class="custom-control-input" id="goggle" value='goggle' checked onclick="checkCheckboxes();">
               <label class="custom-control-label" for="goggle">Safety Goggles</label>
            </div>
            <div class="custom-control custom-checkbox">
               <input type="checkbox" class="custom-control-input" id="vest" value="vest" checked onclick="checkCheckboxes();">
               <label class="custom-control-label" for="vest">Vests</label>
            </div>
            <div class="custom-control custom-checkbox">
               <input type="checkbox" class="custom-control-input" id="saw" value="saw" checked onclick="checkCheckboxes();">
               <label class="custom-control-label" for="saw">Industrial Saws</label>
            </div>
            <div class="custom-control custom-checkbox">
               <input type="checkbox" class="custom-control-input" id="person" value="person" checked onclick="checkCheckboxes();">
               <label class="custom-control-label" for="person">Person</label>
            </div>
         </div>
         <p>
         <div>
            <button onclick="startWebcam();">Start WebCam</button>
            <button onclick="stopPrediction();">Stop WebCam</button>
         </div>
         <p>
         <p>
            <canvas id="canvas" width="640" height="480"></canvas>
            <video  width=640 height=480 id="video"  autoplay></video>
         <p>
      </div>



<script>

var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
var video = document.getElementById('video');

video.setAttribute('autoplay', '');
video.setAttribute('muted', '');
video.setAttribute('playsinline', '');


var values = [];

function checkCheckboxes() {
  values = [];
  var inputs = document.getElementsByTagName("input");
  for (var i = inputs.length - 1; i >= 0; i--)
    if (inputs[i].type === "checkbox" && inputs[i].checked)
      values.push(inputs[i].value);

  var inputs = document.getElementsByTagName("input");
  for (var i = inputs.length - 1; i >= 0; i--)
    if (inputs[i].type === "checkbox" && inputs[i].checked)
      values.push('no_'+inputs[i].value);
  console.log(values)
};


var x = 0;
var y = 0;
var h = 0;
var w = 0;

function drawBoundary(result) {
  for (i = 0; i < result.objects.length; i++) {

    //remove this line if you don't want to restrict the predictions
    if (values.includes(result.objects[i].object)) {

      // var canvas = document.getElementById('canvas');
      // var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.lineWidth = "6";

      var object_class = result.objects[i].object;

      switch (object_class) {
        case "person":
          ctx.fillStyle = "red";
          ctx.strokeStyle = "red";
          break;

        default:
          ctx.fillStyle = "Chartreuse";
          ctx.strokeStyle = "Chartreuse";
      }

      // get rectangle boundaries
      x = result.objects[i].rectangle.x;
      y = result.objects[i].rectangle.y;
      w = result.objects[i].rectangle.w;
      h = result.objects[i].rectangle.h;


      ctx.font = "22px Arial";
      ctx.fillText(result.objects[i].object + " (confidence: " + result.objects[i].confidence + ")", x, y - 10);
      ctx.rect(x, y, w, h);
      ctx.stroke();
    }
  }
}


// var c = document.getElementById('canvas');
// var ctx = c.getContext('2d');
// var video = document.getElementById('video');

var continuePrediction;

function stopPrediction() {
  continuePrediction = false;
}

video.addEventListener('play', function () {
  var $this = this; //cache
  document.getElementById("video").style.display = "none";
  (function loop() {
    if (continuePrediction) { //!$this.paused && !$this.ended) {
      ctx.drawImage($this, 0, 0);
      setTimeout(loop, 1000 / 5); // drawing at 5fps

      var blob = b64toBlob(canvas.toDataURL());
      detect_object(blob)
    }
  })();
}, 0);


function b64toBlob(dataURI) {

  var byteString = atob(dataURI.split(',')[1]);
  var ab = new ArrayBuffer(byteString.length);
  var ia = new Uint8Array(ab);

  for (var i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }
  return new Blob([ab], {
    type: 'image/jpeg'
  });
}


function detect_object(url) {

  if (continuePrediction) {
    const computerVisionKey = document.getElementById('visionkey').value;
    const computerVisionEndPoint = document.getElementById('visionendpoint').value;
    const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({
      inHeader: {
        "Ocp-Apim-Subscription-Key": computerVisionKey
      }
    });
    const client = new Azure.CognitiveservicesComputervision.ComputerVisionClient(
      cognitiveServiceCredentials,
      computerVisionEndPoint
    );

    const options = {
      maxCandidates: 1,
      language: "en"
    };

    client
      .detectObjectsInStream(url, options)
      .then((result) => {
        console.log("The result is:");
        console.log(result);
        drawBoundary(result);
      })
      .catch((err) => {
        console.log("An error occurred:");
        console.error(err);
      });
  }


};

var video;
var webcamStream;


function startWebcam() {
  checkCheckboxes();
  continuePrediction = true;
  if (navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia(

        // constraints
        {
          video: true,
          audio: false
        }).then(

        // successCallback
        function (localMediaStream) {
          video.srcObject = localMediaStream;
          webcamStream = localMediaStream;
        })
      .catch(
        // errorCallback
        function (err) {
          console.log("The following error occured: " + err);
        })

  } else {
    console.log("getUserMedia not supported");
  }
}


</script>
          

   </body>
</html>

